//#include <XRPort.h>
//#include <XRRGBLed.h>
//#include <U8glib.h>
#include <SoftwareSerial.h>
#include <IRremote.h> // Include library IRremote

int dirPin1 = 7;
int dirPin2 = 8;
int pxrPin1 = 5;
int pxrPin2 = 6;
int Left_Speed = 255;
int Right_Speed = 255;
int Left_Speed_Hold = 255;          //定义左侧速度变量
int Right_Speed_Hold = 255;         //定义右侧速度变量

#define MOTOR_GO_FORWARD  {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,LOW);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体前进                          
#define MOTOR_GO_BACK     {digitalWrite(dirPin1,HIGH);digitalWrite(dirPin2,HIGH);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}   //车体后退
#define MOTOR_GO_LEFT     {digitalWrite(dirPin1,HIGH);digitalWrite(dirPin2,LOW);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体左转
#define MOTOR_GO_RIGHT    {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,HIGH);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体右转

#define MOTOR_GO_S_LEFT     {digitalWrite(dirPin1,HIGH);digitalWrite(dirPin2,LOW);digitalWrite(pxrPin1,LOW);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体左前转
#define MOTOR_GO_S_RIGHT    {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,HIGH);analogWrite(pxrPin1,Left_Speed_Hold);digitalWrite(pxrPin2,LOW);}    //车体右前转
#define MOTOR_GO_STOP     {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,LOW);digitalWrite(pxrPin1,LOW);digitalWrite(pxrPin2,LOW);}     //车体停止


SoftwareSerial mySerial(10,9); // RX, TX
int RECV_PIN = 13;
IRrecv irrecv(RECV_PIN);

void setup() {
  pinMode(dirPin1,OUTPUT);
  pinMode(dirPin2,OUTPUT);
  pinMode(pxrPin1,OUTPUT);
  pinMode(pxrPin2,OUTPUT);
//  pinMode(Carled,OUTPUT);
//  pinMode(pin,OUTPUT);
//  pinMode(IR_FOLLOW_LEFT, INPUT);
//  pinMode(IR_FOLLOW_RIGHT, INPUT);
//  pinMode(Echo, INPUT);
//  pinMode(Trig, OUTPUT);
//  pinMode(fan,OUTPUT);
//  digitalWrite(fan,0);  
  MOTOR_GO_FORWARD;
  delay(500);
  MOTOR_GO_STOP;
}

void loop() {
  
}

//XRRGBLed rgbLED(0,4);
//
//int  currentValue = 0;
//int  currentlongValue = 0;
//int  readValidValue = 0;
//bool headStart = false;
//bool WiFiorIR = true;
//
//int code;
//int dirPin1 = 7;
//int dirPin2 = 8;
//int pxrPin1 = 5;
//int pxrPin2 = 6;
//
//int Carled = 1;
//int pin = 2;
//int fan = 9;
//
//int buffer[3];                      //串口接收数据缓存
//int rec_flag;                       //串口接收标志位
//int serial_data;                    //串口数据零时存储
//int Left_Speed = 255;
//int Right_Speed = 255;
//int Left_Speed_Hold = 255;          //定义左侧速度变量
//int Right_Speed_Hold = 255;         //定义右侧速度变量
//
//int RevStatus = 0;
//int TurnAngle = 0;
//int Golength = 0;
//
//int Echo = A3;                      //定义超声波信号接收脚位
//int Trig = A2;                      //定义超声波信号发射脚位
//int IR_FOLLOW_LEFT = 12;            //定义小车左侧循迹红外
//int IR_FOLLOW_RIGHT = 11;           //定义小车右侧循迹红外
//int IR_TRACK_LEFT = A1;             //定义小车左侧跟随红外
//int IR_TRACK_RIGHT = A0;            //定义小车右侧跟随红外
//
//int Cruising_Flag = 0;              //模式切换标志
//int Pre_Cruising_Flag = 0 ;         //记录上次模式
//
//int IR_R;                           //巡线右侧红外状态标志
//int IR_L;                           //巡线左侧红外状态标志
//int IR_TR;                          //跟随右侧红外状态标志
//int IR_TL;                          //跟随左侧红外状态标志
//
//boolean LightStatus = false;
//boolean FanStatus = false;
//boolean MusicStatus = false;
//
//U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);
//
//#define bmp_width 128
//#define bmp_height 64
//
//uint8_t battery = 0;
//int power = 0;
//static const int valPin = A6; 
//bool displayflag = false;
//bool displayflag1 = false;
//bool displayflag2 = false;
///*宏定义小车转向方向*/
//#define MOTOR_GO_FORWARD  {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,LOW);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体前进                          
//#define MOTOR_GO_BACK     {digitalWrite(dirPin1,HIGH);digitalWrite(dirPin2,HIGH);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}   //车体后退
//#define MOTOR_GO_LEFT     {digitalWrite(dirPin1,HIGH);digitalWrite(dirPin2,LOW);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体左转
//#define MOTOR_GO_RIGHT    {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,HIGH);analogWrite(pxrPin1,Left_Speed_Hold);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体右转
//
//#define MOTOR_GO_S_LEFT     {digitalWrite(dirPin1,HIGH);digitalWrite(dirPin2,LOW);digitalWrite(pxrPin1,LOW);analogWrite(pxrPin2,Right_Speed_Hold);}    //车体左前转
//#define MOTOR_GO_S_RIGHT    {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,HIGH);analogWrite(pxrPin1,Left_Speed_Hold);digitalWrite(pxrPin2,LOW);}    //车体右前转
//#define MOTOR_GO_STOP     {digitalWrite(dirPin1,LOW);digitalWrite(dirPin2,LOW);digitalWrite(pxrPin1,LOW);digitalWrite(pxrPin2,LOW);}     //车体停止
//
//#define NO -1
//#define C1L 131
//#define C2L 147
//#define C3L 165
//#define C4L 175
//#define C5L 196
//#define C6L 221
//#define C7L 248
//
//#define C1M 262
//#define C2M 294
//#define C3M 330
//#define C4M 350
//#define C5M 393
//#define C6M 441
//#define C7M 495
//
//#define C1H 525
//#define C2H 589
//#define C3H 661
//#define C4H 700
//#define C5H 786
//#define C6H 882
//#define C7H 990
//
//#define NOTE_C4 262
//#define NOTE_G3 196
//#define NOTE_G3 196
//#define NOTE_A3 220
//#define NOTE_G3 196
//#define NOTE_B3 247
//#define NOTE_C4 262
//
////凤凰 phoenix
//const uint8_t bitmap1[] PROGMEM = {
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0xFE,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,
//0x00,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x00,
//0x00,0xFF,0x03,0xE0,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x3F,0x00,
//0x00,0x00,0x00,0x00,0xE0,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x07,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,
//0x00,0x00,0x00,0xFF,0x03,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x80,0x1F,0x00,0x00,
//0x00,0x00,0xF8,0xFF,0xFF,0x0F,0x3C,0x00,0x00,0x00,0x02,0x00,0xE0,0x03,0x00,0x00,
//0x00,0x00,0xFE,0x1F,0x00,0xFC,0xF1,0x00,0x00,0x00,0x02,0x00,0xF0,0x01,0x00,0x00,
//0x00,0x00,0xFF,0x00,0x00,0x80,0xCF,0x03,0x00,0x80,0x03,0x00,0x7C,0xE0,0x00,0x00,
//0x00,0x00,0x1E,0x00,0xFE,0x1F,0xF0,0x0F,0xC0,0xFF,0x01,0x00,0x1E,0xFC,0x00,0x00,
//0x00,0x00,0x00,0xFE,0xFF,0xFF,0x8F,0x0F,0xFC,0xFF,0x01,0x00,0x8F,0x7F,0x00,0x00,
//0x00,0x00,0x80,0xFF,0xFF,0xC0,0x7F,0x1F,0xE1,0xFF,0x00,0x80,0xE7,0x07,0x00,0x00,
//0x00,0x00,0xC0,0x7F,0x00,0x00,0xC0,0x1F,0xF8,0xEF,0x03,0xC0,0xFB,0x00,0x00,0x00,
//0x00,0x00,0x80,0x01,0x80,0xFF,0xFF,0x3F,0xC0,0xFF,0x07,0xE0,0x1C,0x06,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF8,0xFF,0xE1,0x7F,0x00,0xFF,0x0F,0x70,0xC7,0x0F,0x00,0x00,
//0x00,0x00,0x00,0x00,0xFE,0x03,0x00,0xF8,0x00,0xFE,0x0F,0xF8,0xFB,0x07,0x00,0x00,
//0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0xC0,0x03,0xFC,0x1F,0xF8,0x3F,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x1F,0x7C,0x35,0xFC,0x03,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x68,0x35,0xFE,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xF9,0x28,0x35,0xFE,0xFF,0x01,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xFE,0xF9,0x24,0x71,0xFF,0xFE,0x03,0x00,0x00,
//0x00,0x00,0x00,0x3E,0x00,0x80,0x3F,0xF8,0xF1,0x21,0xF0,0xFF,0x03,0x00,0x00,0x00,
//0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xF8,0xE7,0x13,0xF8,0xE0,0x0F,0x00,0x00,0x00,
//0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFF,0xF1,0xC7,0x1F,0x3C,0x80,0x1F,0x00,0x00,0x00,
//0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0xE7,0x0F,0xFE,0x3F,0x00,0x1E,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xC7,0xFF,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0x0F,0xFE,0xE1,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xF8,0xFF,0xFF,0xF9,0xFF,0xFC,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xF0,0xC3,0x7B,0x24,0xFE,0xF3,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF8,0x1C,0x80,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x7C,0x0E,0xE0,0x7D,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x1E,0x07,0x78,0x1E,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x8E,0x03,0x1C,0x0E,0xC0,0x21,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x80,0x0F,0x04,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x0F,0x02,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xB0,0x03,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
//
//
////小车 car
//const uint8_t bitmap2[] PROGMEM = {
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x87,0x01,0x80,0x0F,0x00,0x00,0x00,0x94,0x00,0x00,0xE0,0x0E,0x00,0x00,
//0x00,0x00,0x87,0x01,0x80,0x0F,0x00,0x00,0x00,0x94,0x00,0x00,0xE0,0x0E,0x00,0x00,
//0x00,0x80,0xCF,0x37,0xC3,0x0F,0x00,0x00,0x00,0x84,0x00,0x00,0x10,0x11,0x00,0x00,
//0x00,0x80,0xFF,0x37,0xC3,0x81,0xE7,0x02,0x00,0x68,0x00,0x00,0x10,0x10,0x00,0x00,
//0x00,0x80,0xFF,0x37,0xC3,0x81,0xE7,0x02,0x00,0x68,0x00,0x00,0x10,0x10,0x00,0x00,
//0x00,0x80,0x7B,0x37,0xC3,0x01,0xEE,0x03,0x00,0x10,0x00,0x00,0x60,0x0C,0x00,0x00,
//0x00,0x80,0x03,0x37,0xC3,0x81,0xEF,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,
//0x00,0x80,0x03,0x37,0xC3,0xCF,0xEE,0x60,0x76,0x00,0x00,0x04,0x00,0x01,0x00,0x00,
//0x00,0x80,0x03,0x37,0xC3,0xCF,0xEE,0x60,0x76,0x00,0x00,0x04,0x00,0x01,0x00,0x00,
//0x00,0x80,0x03,0xE7,0x83,0x8F,0xEF,0x60,0x76,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
//0x00,0x80,0x03,0xE7,0x83,0x8F,0xEF,0x60,0x76,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
//0x00,0x80,0x03,0xE7,0x83,0x8F,0xEF,0x60,0x76,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x14,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x14,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x6B,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x58,0x00,0x00,0xE0,0xFF,0x1F,0x1E,0x00,0x14,0x00,0x00,0x00,
//0x00,0x00,0x77,0x00,0xA4,0x01,0xC0,0xFF,0xFF,0xFF,0x0F,0x00,0x08,0x00,0x00,0x00,
//0x00,0x00,0x77,0x00,0xA4,0x01,0xC0,0xFF,0xFF,0xFF,0x0F,0x00,0x08,0x00,0x00,0x00,
//0x00,0x80,0x88,0x00,0x84,0x01,0xF8,0xFD,0xFF,0x07,0x7F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x80,0x80,0x00,0x58,0x00,0xCF,0x1F,0x80,0xF8,0xF0,0x03,0x00,0x00,0x00,0x00,
//0x00,0x80,0x80,0x00,0x58,0x00,0xCF,0x1F,0x80,0xF8,0xF0,0x03,0x00,0x00,0x00,0x00,
//0x00,0x00,0x43,0x00,0x20,0xC0,0xF1,0x00,0x80,0x00,0x8F,0x1F,0x00,0xC0,0x02,0x00,
//0x00,0x00,0x34,0x00,0x00,0xF0,0x0E,0x00,0x80,0x07,0x1C,0x7C,0x00,0x20,0x05,0x00,
//0x00,0x00,0x08,0x00,0x00,0xBC,0xCF,0xFF,0x8F,0x0F,0x60,0xF8,0x03,0x20,0x04,0x00,
//0x00,0x00,0x08,0x00,0x00,0xBC,0xCF,0xFF,0x8F,0x0F,0x60,0xF8,0x03,0x20,0x04,0x00,
//0x00,0x00,0x00,0x00,0x80,0xF7,0x07,0x00,0x80,0x8F,0xC1,0xC1,0x07,0xC0,0x02,0x00,
//0x00,0x00,0x00,0x00,0xC0,0xF3,0x01,0x00,0x80,0x1F,0x80,0x83,0x0F,0x00,0x01,0x00,
//0x00,0x00,0x00,0x00,0xC0,0xF3,0x01,0x00,0x80,0x1F,0x80,0x83,0x0F,0x00,0x01,0x00,
//0x00,0x00,0x00,0x00,0xE0,0xC1,0xE1,0x00,0xC0,0x7F,0xFC,0x07,0x1C,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xE0,0xC1,0xE1,0x00,0xC0,0x7F,0xFC,0x07,0x1C,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x7F,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xF8,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x7F,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xF8,0x00,0x00,0x00,
//0x00,0x00,0x00,0xFE,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xF0,0x03,0x00,0x00,
//0x00,0x00,0x80,0xFF,0x80,0xFF,0x07,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0x00,0x00,
//0x00,0x00,0x80,0xFF,0x80,0xFF,0x07,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0x00,0x00,
//0x00,0x00,0xF0,0xDF,0x07,0x00,0x00,0x00,0x40,0x00,0x00,0x38,0x00,0x1E,0x00,0x00,
//0x00,0x00,0x7C,0x00,0xE0,0x03,0x00,0x00,0xF0,0x07,0x80,0x07,0x00,0x1E,0x00,0x00,
//0x00,0x00,0x3C,0x00,0xC0,0x05,0x00,0x00,0xF0,0x07,0xC0,0x01,0x00,0x3C,0x00,0x00,
//0x00,0x00,0x3C,0x00,0xC0,0x05,0x00,0x00,0xF0,0x07,0xC0,0x01,0x00,0x3C,0x00,0x00,
//0x00,0x00,0x0F,0x00,0x00,0x06,0x00,0x00,0x00,0x04,0x60,0x00,0x00,0xF0,0x00,0x00,
//0x00,0x80,0x08,0xE0,0x00,0x0C,0x00,0x00,0x00,0x04,0x3C,0x9E,0x1F,0xE0,0x01,0x00,
//0x00,0x80,0x08,0xE0,0x00,0x0C,0x00,0x00,0x00,0x04,0x3C,0x9E,0x1F,0xE0,0x01,0x00,
//0x00,0xC0,0x07,0xFE,0x47,0x08,0x00,0x00,0x00,0x04,0x9C,0xFF,0xFF,0xC0,0x03,0x00,
//0x00,0xC0,0x07,0xFF,0x9F,0x39,0x00,0x00,0x00,0x04,0xDE,0xFF,0xFF,0x01,0x07,0x00,
//0x00,0xE0,0x80,0xFF,0x3F,0x32,0x00,0x00,0x00,0x04,0x4E,0xFE,0xFF,0xCF,0x1F,0x00,
//0x00,0xE0,0x80,0xFF,0x3F,0x32,0x00,0x00,0x00,0x04,0x4E,0xFE,0xFF,0xCF,0x1F,0x00,
//0x00,0xF8,0xCF,0xFF,0x7F,0x30,0x00,0x00,0x00,0x04,0x6E,0xFE,0xFF,0xFF,0x1F,0x00,
//0x00,0xB8,0xF7,0xE7,0xFE,0x31,0x00,0x00,0x00,0x04,0xBE,0x7F,0xF7,0xFF,0x1F,0x00,
//0x00,0xF8,0xF3,0x0F,0xFE,0x31,0x00,0x00,0x00,0x04,0x9C,0x7F,0xF0,0xDF,0x07,0x00,
//0x00,0xF8,0xF3,0x0F,0xFE,0x31,0x00,0x00,0x00,0x04,0x9C,0x7F,0xF0,0xDF,0x07,0x00,
//0x00,0xF8,0xF3,0x0F,0xFE,0x31,0x00,0x00,0x00,0x04,0x9C,0x7F,0xF0,0xDF,0x07,0x00,
//0x00,0xE0,0xF0,0x0F,0xFE,0x71,0x00,0x00,0x00,0x04,0x82,0x7F,0xE0,0xDF,0x03,0x00,
//0x00,0xE0,0xF0,0x0F,0xFE,0x71,0x00,0x00,0x00,0x04,0x82,0x7F,0xE0,0xDF,0x03,0x00,
//0x00,0xE0,0xF0,0xE1,0xF8,0x71,0x00,0x00,0xFE,0xE7,0x83,0x9F,0x87,0xDF,0x03,0x00,
//0x00,0xC0,0xF3,0x1F,0xFC,0x03,0xFE,0xFF,0xFF,0x03,0xC0,0x7F,0xE0,0xFF,0x01,0x00,
//0x00,0x80,0xF3,0x0F,0xFE,0x03,0x00,0x00,0x00,0x00,0xC0,0x7F,0xF0,0x0F,0x00,0x00,
//0x00,0x80,0xF3,0x0F,0xFE,0x03,0x00,0x00,0x00,0x00,0xC0,0x7F,0xF0,0x0F,0x00,0x00,
//0x00,0x00,0xF0,0xE7,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xE7,0x3F,0x00,0x00,
//0x00,0x00,0xFC,0xE7,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,
//0x00,0x00,0xFC,0xE7,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,
//0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,};
//
//
////花瓣 petal
//const uint8_t bitmap3[] PROGMEM = {
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0x03,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x0F,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x1F,0x00,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x3F,0x00,0xF8,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x3F,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x7F,0x00,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xC0,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xE0,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xF1,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xF9,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xF9,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xF9,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFC,0x07,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xF1,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x7F,0xE0,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x7F,0xC0,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x7F,0xC0,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0x7F,0xC0,0xFF,0xFF,0x7F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xE0,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0xFB,0xFF,0xFF,0x1F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0x9F,0x7F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFE,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xFF,0xFF,0x7F,0xFE,0xFF,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xFE,0xFF,0x1F,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF8,0xFF,0x0F,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF0,0xFF,0x87,0xFF,0xFB,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xC0,0xFF,0x83,0xFF,0xFB,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xFE,0xC1,0xFF,0xF3,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xF1,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xE1,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xC1,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0x81,0xFF,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x01,0xFF,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x01,0xFE,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x00,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0x00,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x00,0xF0,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x7F,0x00,0xC0,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x7F,0x00,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x3F,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x3F,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
//
//
////马 horse
//const uint8_t bitmap4[] PROGMEM = {
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xFE,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0x83,0x79,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0xEF,0xE1,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xFC,0x3D,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0x13,0xFE,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0xA0,0xC1,0xCF,0x0D,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0xE0,0xC0,0x0F,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x30,0x00,0x03,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x08,0x00,0xC0,0x18,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x1C,0x06,0xF0,0x7E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x0F,0x09,0xE0,0x1B,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x80,0x01,0x12,0x00,0x00,0x1B,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0xC0,0x83,0x10,0x00,0xC8,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0xE0,0x9F,0x09,0x00,0x38,0x20,0x00,0x00,0x00,0xE0,0x9F,0x1F,0x00,0x00,0x00,
//0x00,0x20,0xFF,0x1F,0x01,0x00,0xF3,0x01,0x00,0x3E,0x10,0x7E,0x0F,0x00,0x00,0x00,
//0x00,0xE0,0xCC,0x73,0x00,0xC0,0x7F,0x00,0xE0,0xFF,0x01,0x00,0x3D,0x00,0x00,0x00,
//0x00,0x80,0x06,0x80,0x00,0x00,0x8C,0x01,0x78,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,
//0x00,0x00,0x03,0x78,0x00,0x00,0x60,0x00,0x0F,0x0F,0x00,0x1C,0xC2,0x07,0x00,0x00,
//0x00,0x00,0x00,0xF0,0x01,0x00,0x00,0xF0,0xC3,0xE1,0x00,0x70,0x86,0x03,0x00,0x00,
//0x00,0x00,0x00,0xE0,0x03,0x00,0xF0,0x7F,0x70,0x98,0x03,0xC0,0x0C,0x07,0x00,0x00,
//0x00,0x00,0x00,0xC0,0xE7,0x01,0x00,0x00,0x00,0x04,0x04,0x80,0x1D,0x7C,0x04,0x00,
//0x00,0x00,0x00,0xC0,0x3F,0x03,0x00,0x00,0x00,0xF8,0x49,0x00,0x1F,0x00,0x02,0x00,
//0x00,0x00,0x00,0x80,0x1B,0x06,0x00,0x00,0x00,0xDC,0x8B,0x00,0x3E,0x01,0x03,0x00,
//0x00,0x00,0x00,0x80,0x97,0x06,0x00,0x00,0x00,0x02,0x83,0x00,0x7C,0xFE,0x01,0x00,
//0x00,0x00,0x00,0x80,0x97,0x03,0x00,0x00,0x00,0x01,0x82,0x01,0xF8,0xFC,0x00,0x00,
//0x00,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x80,0x01,0x03,0x01,0xE0,0x7F,0x00,0x00,
//0x00,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x80,0x81,0x01,0x01,0x80,0x0F,0x00,0x00,
//0x00,0x00,0x00,0x00,0xC1,0x00,0x06,0x00,0xC0,0x79,0x98,0x01,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x36,0x7C,0x06,0x00,0xC0,0x49,0xA4,0x01,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x36,0xFF,0x03,0x00,0xC0,0xC1,0xE4,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x3E,0x07,0x10,0x80,0xC3,0x47,0xE0,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xBC,0x07,0x08,0x60,0xC0,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xB8,0x3F,0x04,0xF1,0xDF,0x00,0x70,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xB8,0xC3,0xC3,0x79,0x80,0x01,0x38,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xA0,0x21,0xC0,0x07,0x80,0x19,0x1E,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x40,0x3B,0xF6,0x01,0x00,0x2D,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x02,0x0F,0x0F,0x00,0x00,0xA7,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x02,0x82,0x81,0x0E,0x00,0x86,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x43,0xC6,0xC0,0x3E,0x00,0x8C,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x7F,0x7E,0x70,0x0F,0x00,0xB8,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x7D,0x37,0xF0,0x07,0x00,0xF0,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x0A,0x3B,0xF0,0x01,0x00,0xFC,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x07,0x27,0x7F,0x00,0x00,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x0F,0xFF,0x0F,0x00,0xFE,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x0C,0xFE,0x00,0x80,0x3F,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x18,0x1E,0x00,0x80,0x3F,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x30,0x00,0x00,0xC0,0x07,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x60,0x32,0x00,0xE0,0x04,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xE0,0x0F,0x00,0xE0,0x81,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xC0,0x37,0x00,0xF0,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x80,0x7F,0x00,0x30,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x27,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
//
//
////玫瑰 rose
//const uint8_t bitmap5[] PROGMEM = {
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0xC0,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xE0,0x98,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xE0,0x7F,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0xF0,0xFF,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x40,0xB0,0x1F,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xE0,0x1F,0xFF,0xFD,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xE0,0x27,0xFF,0xFF,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xE0,0x63,0xCA,0xFF,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x70,0x74,0x1F,0xCF,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xB0,0x77,0x7D,0xDF,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xB8,0x47,0xFF,0xFE,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xB8,0x41,0xFF,0x3D,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xBC,0x1E,0xFB,0xBF,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xBE,0x4C,0xF7,0xBF,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xBF,0x79,0xE7,0xEF,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0xBF,0x7B,0xE7,0x9F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0xBF,0x7F,0xEF,0x9F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0xBF,0x77,0xEF,0xBF,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0xA7,0xF7,0xEF,0xFF,0x1E,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xBC,0xFF,0xFF,0xFF,0x1F,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x3F,0xEF,0xF7,0xBF,0xEF,0x01,0xFE,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0xC0,0x7F,0xEF,0xFF,0xBF,0xE7,0x03,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0xC0,0xFF,0x7C,0xFB,0xFF,0xF7,0x87,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x80,0xFF,0x5B,0xFC,0xFF,0xF1,0x87,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xEF,0xB7,0xFC,0x7F,0x02,0xC0,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xEE,0x6F,0xF8,0x1F,0x01,0xC0,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xFE,0xEF,0xE1,0xC7,0x0D,0xC0,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xE8,0x0F,0x0F,0xF8,0x1C,0xC0,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xE0,0xEF,0xFF,0x7F,0x30,0xC0,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xC0,0xFB,0xFF,0x3F,0xE1,0xC0,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0xC0,0xFD,0xFF,0x03,0x83,0xC1,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x83,0xFF,0x9F,0x03,0x83,0xFF,0x07,0xFC,0x01,0x00,0x00,0x00,
//0x00,0x00,0x00,0x80,0x3F,0xFC,0x87,0x07,0x86,0xFF,0x07,0xFF,0x03,0x00,0x00,0x00,
//0x00,0x00,0x00,0xC0,0x7F,0xE0,0x33,0x0E,0x0C,0xFF,0xC3,0xFF,0x01,0x00,0x00,0x00,
//0x00,0x00,0x00,0xC0,0x00,0x00,0x30,0x00,0x18,0xFC,0xE1,0xFF,0x01,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x30,0x78,0xF0,0xFF,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0xF8,0xFF,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0xC0,0x00,0xFC,0x7F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xFC,0x7F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x03,0xFC,0x3F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x0F,0x06,0xFC,0x1F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x3F,0x0C,0xFE,0x0F,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x7F,0x38,0xF9,0x07,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0xFF,0x38,0xC1,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xB0,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xE1,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xC1,0x00,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0xF1,0x01,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0xFF,0xC1,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0x01,0x03,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0x01,0x06,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0x7F,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x3F,0x00,0x18,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0x1F,0x00,0x18,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x07,0x00,0x30,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,
//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
//
//
//int Tune0[] = {
//  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
//};
//
//int Beat0[] = {
//  4, 8, 8, 4, 4, 4, 4, 4
//};
//
////欢乐颂 Ode To Joy
//int Tune_3[] = {  
//  C3H,C3H,C4H,C5H,  
//  C5H,C4H,C3H,C2H,  
//  C1H,C1H,C2H,C3H,  
//  C3H,C2H,C2H,  
//  C3H,C3H,C4H,C5H,  
//  C5H,C4H,C3H,C2H,  
//  C1H,C1H,C2H,C3H,  
//  C2H,C1H,C1H,  
//  C2H,C2H,C3H,C1H,  
//  C2H,C3H,C4H,C3H,C1H,  
//  C2H,C3H,C4H,C3H,C2H,  
//  C1H,C2H,C5M,NO,  
//  C3H,C3H,C4H,C5H,  
//  C5H,C4H,C3H,C4H,C2H,  
//  C1H,C1H,C2H,C3H,  
//  C2H,C1H,C1H  
//};
//
//float Beat_3[] = {  
//  1,1,1,1,  
//  1,1,1,1,  
//  1,1,1,1,  
//  1+0.5,0.5,1+1,  
//  1,1,1,1,  
//  1,1,1,1,  
//  1,1,1,1,  
//  1+0.5,0.5,1+1,  
//  1,1,1,1,  
//  1,0.5,0.5,1,1,  
//  1,0.5,0.5,1,1,  
//  1,1,1,1,  
//  1,1,1,1,  
//  1,1,1,0.5,0.5,  
//  1,1,1,1,  
//  1+0.5,0.5,1+1,  
//};
//
//
//void PlayMusic(int tuneLengt ,int *tune,float *beat)
//{
//    for (int thisNote = 0; thisNote < tuneLengt; thisNote++)
//    {
//      tone(2,tune[thisNote]);
//      delay(400*beat[thisNote]);
//      noTone(2);
//    }
//}
//
//void PlayMusicInt(int tuneLengt ,int *tune,int *beat)
//{
//    for (int thisNote = 0; thisNote < tuneLengt; thisNote++)
//    {
//      int noteDuration = 1000 / beat[thisNote];
//      tone(2, tune[thisNote], noteDuration);
//      int pauseBetweenNotes = noteDuration * 1.3;
//      delay(pauseBetweenNotes);
//      noTone(2);
//    }
//}
//
///*
//*********************************************************************************************************
//** 函数名称 ：Open_Light
//** 函数功能 ：打开车灯
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/ 
//void Open_Light()//开大灯
//{
//  digitalWrite(Carled, HIGH);  //拉低电平，正极接电源，负极接Io口
//  delay(200);
//}
//
// /*
//*********************************************************************************************************
//** 函数名称 ：Close_Light
//** 函数功能 ：关闭车灯
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Close_Light()//关大灯
//{
//  digitalWrite(Carled, LOW);   //拉低电平，正极接电源，负极接Io口
//  delay(200);
//}
//
///*
//*********************************************************************************************************
//** 函数名称 ：Open_Light
//** 函数功能 ：打开车灯
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/ 
//void Open_Fan()//开风扇
//{
//  digitalWrite(fan, HIGH);  
//  delay(200);
//}
//
// /*
//*********************************************************************************************************
//** 函数名称 ：Close_Light
//** 函数功能 ：关闭车灯
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Close_Fan()//关风扇
//{
//  digitalWrite(fan, LOW);  
//  delay(200);
//}
//
//
//
//void drawBmp(const uint8_t *bitmap)
//{ 
//    u8g.firstPage();  
//    do{
//      u8g.drawXBMP(0,0,bmp_width,bmp_height,bitmap);
//    }while(u8g.nextPage());
//}
//
//
//
///*
//*********************************************************************************************************
//** 函数名称 ：Route()
//** 函数功能 ：路径规划
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Route()
//{
//  if (RevStatus == 0)
//  {
//    mySerial.write(0xff);
//    mySerial.write(0xa8);
//    mySerial.write((byte)0x00);
//    mySerial.write((byte)0x00);
//    mySerial.write(0xff);
//    delay(500);
//  }
//
//  while (RevStatus)
//  {
//    if (RevStatus == 1)
//    {
//      RevStatus = 0;
//      MOTOR_GO_LEFT;
//      delay(TurnAngle * 10);
//      MOTOR_GO_STOP;
//      MOTOR_GO_FORWARD;
//      delay(Golength * 8);
//      MOTOR_GO_STOP;
//      break;
//    }
//    if (RevStatus == 2)
//    {
//      RevStatus = 0;
//      MOTOR_GO_RIGHT;
//      delay(TurnAngle * 10);
//      MOTOR_GO_STOP;
//      MOTOR_GO_FORWARD;
//      delay(Golength * 8);
//      MOTOR_GO_STOP;
//      break;
//    }
//  }
//}
//
///*
//*********************************************************************************************************
//** 函数名称 ：TrackLine
//** 函数功能 ：检测黑线在俩个红外之间的位置，通过逻辑判断再做出小车的方向改变
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/ 
//void TrackLine()   // 巡线模式
//{
//  IR_L = digitalRead(IR_FOLLOW_LEFT);//读取左边传感器数值
//  IR_R = digitalRead(IR_FOLLOW_RIGHT);//读取右边传感器数值
//
//  if ((IR_L == LOW) && (IR_R == LOW)) //两边同时探测到障碍物
//  {
//    MOTOR_GO_FORWARD;//直行
//    return;
//  }
//  
//  if ((IR_L == LOW) && (IR_R == HIGH)) //左侧遇到障碍
//  {
//    MOTOR_GO_S_LEFT;//左转
//    return;
//  }
//  
//  if ((IR_L == HIGH) && ( IR_R == LOW)) //右侧遇到障碍
//  {
//    MOTOR_GO_S_RIGHT;//右转
//    return;
//  }
//  
//  if ((IR_L == HIGH) && (IR_R == HIGH)) //左右都检测到，就如视频中的那样遇到一道横的胶带
//  {
//    MOTOR_GO_FORWARD;//直行
//    return;
//  }
//}
//
///*
//*********************************************************************************************************
//** 函数名称 ：Follow
//** 函数功能 ：跟随红外检测障碍物在左或在右，通过逻辑判断再做出小车的方向改变
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Follow()   // 跟随模式
//{
//  IR_TL = digitalRead(IR_TRACK_LEFT);//读取左边传感器数值
//  IR_TR = digitalRead(IR_TRACK_RIGHT);//读取右边传感器数值
//
//  if ((IR_TL == HIGH) && (IR_TR == HIGH)) //两边同时探测不到障碍物
//  {
//    MOTOR_GO_FORWARD;//直行
//    return;
//  }
//  
//  if ((IR_TL == HIGH) && (IR_TR == LOW)) //左侧遇到障碍
//  {
//    MOTOR_GO_S_LEFT;//左转
//    return;
//  }
//  
//  if ((IR_TL == LOW) && (IR_TR == HIGH)) //右侧遇到障碍
//  {
//    MOTOR_GO_S_RIGHT;//右转
//    return;
//  }
//  
//  if ((IR_TL == LOW) && (IR_TR == LOW)) //两边同时探测到障碍物
//  {
//    MOTOR_GO_STOP;//停止
//    return;
//  }
//}
//
//
///*
//*********************************************************************************************************
//** 函数名称 ：Get_Distence
//** 函数功能 ：检测超声波的测得的距离值并返回(单位cm)
//** 入口参数 ：无
//** 出口参数 ：Ldistance
//*********************************************************************************************************
//*/ 
//char Get_Distance()//测出距离
//{
//  digitalWrite(Trig, LOW);   // 让超声波发射低电压2μs
//  delayMicroseconds(2);
//  digitalWrite(Trig, HIGH);  // 让超声波发射高电压10μs，这里至少是10μs
//  delayMicroseconds(10);
//  digitalWrite(Trig, LOW);    // 维持超声波发射低电压
//  float Ldistance = pulseIn(Echo, HIGH,5000);  // 读差相差时间
//  Ldistance = Ldistance / 5.8 / 10; // 将时间转为距离距离（单位：公分）
//  //Serial.println(Ldistance);      //显示距离
//  return Ldistance;
//}
//
//  void GetBattery()
//  {
//    int val;
//    pinMode(valPin,INPUT);
//    val = analogRead(valPin);
//    if(val>798)val=798;
//    if(val<614)val=614;
//    int temp = val-614;
//    power = temp*0.54;
//    battery = power/10;
//  }
//  
//  void drawBatteryFrame(uint8_t x,uint8_t y,uint8_t leng,uint8_t wide,uint8_t level)
//  {
//    uint8_t Newwide,Newleng,Power;
//    Newleng = leng-7;
//    Newwide = wide-7;
//
//    Power = (int)(Newwide-3.6*level);
//    u8g.drawHLine(x+1,y,leng-2);
//    u8g.drawHLine(x,y+1,leng);
//    u8g.drawHLine(x+1,y+wide,leng-1);
//    u8g.drawHLine(x,y+wide-1,leng+1);
//    u8g.drawVLine(x,y+1,wide-2);
//    u8g.drawVLine(x+1,y,wide);
//    u8g.drawVLine(x+leng-1,y,wide);
//    u8g.drawVLine(x+leng,y+1,wide-2);
//    
//    u8g.drawHLine(x+4, y-2, leng-8);
//    u8g.drawHLine(x+4, y-3, leng-8);
//    u8g.drawHLine(x+4, y-4, leng-8);
//    u8g.drawHLine(x+5, y-5, leng-10);
//    for(uint8_t i=Newwide;i>Power;i--)
//    {
//      u8g.drawHLine(x+4, y+3+i, Newleng);
//    }
//  }
//
//    void initdraw(uint8_t bat)
//  {
//    uint8_t x=100,y=20,leng=27,wide=43;
//
//    u8g.setFont(u8g_font_5x7);
//    u8g.setFontPosTop();
//    u8g.drawStr(0, 0, "XiaoR GEEK");
//    u8g.setPrintPos(70, 0); // 对应 x，y 轴值
//    u8g.print("Battery:");
//    u8g.print(power);
//    u8g.print("%");
//    u8g.drawHLine(0, 12,128);
//    /*
//    u8g.drawHLine(0, 10,96);
//    u8g.drawHLine(0, 63,96);
//    u8g.drawVLine(96,10,54);
//    u8g.drawVLine(0,10,54);
//    */
//    drawBatteryFrame(x,y,leng,wide,bat);
//  }
//  
//    void drawNum(uint8_t x,uint8_t y,int num ,uint8_t bat)
//  {
//    initdraw(bat);
//    u8g.setPrintPos(0, 34); // 对应 x，y 轴值
//    u8g.print("Distance:");
//    u8g.setPrintPos(70, 34); // 对应 x，y 轴值
//    u8g.print("cm");
//    u8g.setFont(u8g_font_10x20);
//    u8g.setPrintPos(x, y+30); // 对应 x，y 轴值
//    u8g.print(num);
//  }
//
//  void displayNum(uint8_t x,uint8_t y,int num )
//  {
//    GetBattery();
//    u8g.firstPage();  
//    do{
//      drawNum(x,y,num,battery);
//    }while(u8g.nextPage());
//  }
//
//  void drawString(uint8_t x,uint8_t y,char *str ,uint8_t bat)
//  {
//    initdraw(bat);
//    u8g.setFont(u8g_font_10x20);
//    uint8_t a=strlen(str);
//    char str2[10];
//    uint8_t b=0;
//
//    if(x>90){
//      x=90;
//      b = 0;
//    }
//    else{
//        b = (100-x)/10;
//    }
//    if(a>b){
//      a=b;
//    }
//    str2[a] = '\0';
//    strncpy(str2, str, a);
//    if(y>34)y=34;
//    u8g.drawStr(x, y+30, str2);
//    //u8g.drawStr(x, y+47, str2);
//    //u8g.drawStr(x, y+64, str2);
//    u8g.setPrintPos(x, y+5); // 对应 x，y 轴值
//    u8g.print("I'm");
//  }
//
//
//  void displayStr(uint8_t x,uint8_t y,char *str )
//  {
//    GetBattery();
//    u8g.firstPage();  
//    do{
//      drawString(x,y,str,battery);
//    }while(u8g.nextPage());
//  }
//
//
///*
//*********************************************************************************************************
//** 函数名称 ：Send_Distance
//** 函数功能 ：向上位机发送超声波数据(数据格式:0XFF,0X03，角度(默认0X00),距离(dis),0XFF)
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Send_Distance()//超声波距离PC端显示
//{
//  int dis = Get_Distance();
//  /*
//  mySerial.write(0xff);
//  mySerial.write(0x03);
//  mySerial.write((byte)0x00);
//  mySerial.write(dis);
//  mySerial.write(0xff);*/
//  delay(50);
//  displayNum(48,12,dis);
//  delay(450);
//}
//
///*
//*********************************************************************************************************
//** 函数名称 ：Communication_Decode()
//** 函数功能 ：串口命令解码
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Communication_Decode()
//{   
//    if(buffer[0]==0x00)
//    {
//        switch(buffer[1])   //电机命令
//        {
//            case 0x01:MOTOR_GO_FORWARD;WiFiorIR = false; return;
//            case 0x02:MOTOR_GO_BACK;WiFiorIR = false;    return;
//            case 0x03:MOTOR_GO_LEFT;WiFiorIR = false;    return;
//            case 0x04:MOTOR_GO_RIGHT;WiFiorIR = false;   return;
//            case 0x00:MOTOR_GO_STOP;WiFiorIR = true;    return;
//            default: return;
//        } 
//    }
//    else if(buffer[0]==0x02)//调速
//    {
//        if(buffer[2]>100)return;      
//        if(buffer[1]==0x01)//左侧调档
//        {
//           Left_Speed_Hold=buffer[2]*2+55;//速度档位是0~100 换算成pwm 速度pwm低于55电机不转
//           //EEPROM.write(0x09,Left_Speed_Hold);//存储速度
//        }
//        if(buffer[1]==0x02)//右侧调档
//        {
//           Right_Speed_Hold=buffer[2]*2+55;//速度档位是0~100 换算成pwm 速度pwm低于55电机不转
//           //EEPROM.write(0x0A,Right_Speed_Hold);//存储速度
//        }
//      }
//    else if(buffer[0]==0x04)//开车灯指令为FF040100FF,关车灯指令为FF040000FF
//    {
//          switch(buffer[1])  
//          {
//              case 0x00:Close_Light(); return; //关车灯
//              case 0x01:Open_Light(); return;  //开车灯
//              default: return;
//          } 
//    }
//    else if(buffer[0]==0x04)//开风扇指令为FF040300FF,关风扇指令为FF040200FF
//    {
//          switch(buffer[1])  
//          {
//              case 0x02:Close_Light(); return; //关风扇
//              case 0x03:Open_Light(); return;  //开风扇
//              default: return;
//          } 
//    }
//    else if(buffer[0]==0x40)//存储电机标志
//    {
//         //adjust=buffer[1];
//         //EEPROM.write(0x10,adjust);
//    }
//    else if(buffer[0]==0xA0)//收到右转
//    {
//         RevStatus = 2;
//         TurnAngle=buffer[1];
//         Golength=buffer[2];
//    }
//    else if(buffer[0]==0xA1)//收到左转
//    {
//         RevStatus = 1;
//         TurnAngle=buffer[1];
//         Golength=buffer[2];
//    }
//    else if(buffer[0]==0x13)//模式切换开关
//    {
//          switch(buffer[1])
//    {           
//          case 0x01: Cruising_Flag = 1;displayflag1 = true; return;         //跟随
//          case 0x02: Cruising_Flag = 2;displayflag2 = true; return;         //巡线
//          //case 0x03: Cruising_Flag = 3; return;       //避障
//          //case 0x04: Cruising_Flag = 4; return;       //雷达避障
//          case 0x05: Cruising_Flag = 5;displayflag = true; return;       //超声波距离PC端显示
//          case 0x07: Cruising_Flag = 7;               //路径规划  
//             Left_Speed_Hold = 100;
//             Right_Speed_Hold = 100;
//             return;                           
//          case 0x00: Cruising_Flag = 0;RevStatus=0;   //正常模式
//             Left_Speed_Hold = 255;
//             Right_Speed_Hold = 255;
//             return;       
//          default:Cruising_Flag = 0; return;          //正常模式
//      }
//   }
//}
//
//
///*
//*********************************************************************************************************
//** 函数名称 ：Cruising_Mod()
//** 函数功能 ：模式切换函数
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Cruising_Mod()//模式功能切换函数
//{
//  if (Pre_Cruising_Flag != Cruising_Flag)
//  {
//    if (Pre_Cruising_Flag != 0)
//    {
//      MOTOR_GO_STOP;
//    }
//    Pre_Cruising_Flag =  Cruising_Flag;
//  }
//  switch (Cruising_Flag)
//  {
//    case 1: 
//    /*
//        if(displayflag1)
//           {
//              displayStr(0,30," Follow");
//              displayflag1 = false;
//           } 
//           */
//       Follow();WiFiorIR = false; return;               //跟随模式
//    case 2: 
//    /*
//      if(displayflag2)
//       {
//          displayStr(0,30," TrackLine");
//          displayflag2 = false;
//       } */
//      TrackLine();WiFiorIR = false; return;            //巡线模式
//    //case 3: Avoiding(); return;                            //避障模式
//    //case 4: AvoidByRadar(15); return;                      //超声波避障模式
//    case 5: Send_Distance();return;                          //超声波距离PC端显示
//    case 7: Route(); return;                                 //路径规划
//    default:
//       if(displayflag)
//       {
//          displayStr(0,30,"  WuLiBot");
//          displayflag = false;
//       } return;
//  }
//}
//
///*
//*********************************************************************************************************
//** 函数名称 ：Get_uartdata()
//** 函数功能 ：读取串口命令
//** 入口参数 ：无
//** 出口参数 ：无
//*********************************************************************************************************
//*/
//void Get_uartdata(void)
//{
//    
//    if (mySerial.available())
//    {
//        static int i;
//        serial_data = mySerial.read();
//        if (rec_flag == 0)
//        {
//          if (serial_data == 0xff)//第一次获取到0xff(即包头)
//          {
//            rec_flag = 1;
//            i = 0;
//            //Costtime = 0;
//          }
//        }
//        else
//        {
//          if (serial_data == 0xff)//第二次获取到0xff(即包尾)
//          {
//            rec_flag = 0;
//            if (i == 3)//获取到中间数据为3个字节，说明此命令格式正确
//            {
//              Communication_Decode();//执行命令解析函数
//            }
//            i = 0;
//          }
//          else
//          {
//            buffer[i] = serial_data;//暂存数据
//            i++;
//          }
//        }
//    }
//}
//
//
//void startDecode(void)//开始解析
//{
//  decode_results results;
//  static int decode_count = 0;
//  delay(1);
//  if(irrecv.decode(&results))
//  {
//    decode_count = 0;
//    currentValue = (results.value >> 8)&0xff;
//
//    if(currentValue != 0xff)//ping码
//    {
//      currentlongValue = currentValue;
//      readValidValue = currentValue;
//      headStart = true;
//    }
//    irrecv.resume();
//        
//  }
//  else
//  {
//    if(headStart)
//    {
//      decode_count++;
//      if(decode_count > 200)
//      {
//        decode_count = 0;
//        headStart = false;
//        currentlongValue = 0;
//      }
//    }
//    else
//    {
//      decode_count = 0;
//      currentlongValue = 0;
//      currentValue = 0;
//    }
//  }
//}
//
//bool keyPressed(int value)
//{
//  currentValue = 0;
//  if(readValidValue == value)
//  {
//    readValidValue = 0;
//    return true;
//  }
//  return false;
//}
//
//
//bool keyPressedLong(int value)
//{
//  return (headStart && currentlongValue == value);
//}
//
//
//
//
//void IRrun()
//{
//    if(keyPressedLong(24)){
//        MOTOR_GO_FORWARD
//        WiFiorIR = true;
//    }else if(keyPressedLong(74)){
//        MOTOR_GO_BACK
//        WiFiorIR = true;
//    }else if(keyPressedLong(16)){
//        MOTOR_GO_LEFT
//        WiFiorIR = true;
//    }else if(keyPressedLong(90)){
//        MOTOR_GO_RIGHT
//        WiFiorIR = true;
//    }
//    else if(keyPressed(56)){              //按键5
//        LightStatus = !LightStatus;       //开关灯
//        if(LightStatus){
//             Open_Light();
//          }else{
//            Close_Light();
//          }
//    }
//    else if(keyPressed(82)){              //按键9
//        FanStatus = !FanStatus;           //开关风扇
//        if(FanStatus){
//             Open_Fan();  
//          }else{
//             Close_Fan();
//          }
//    }
//    else if(keyPressed(168)){             //按键PLAY
//      MusicStatus = true;
//      /*
//      if(MusicStatus)
//      {
//        PlayMusicInt(sizeof(Tune0)/sizeof(Tune0[0]),Tune0,Beat0);
//        MusicStatus = false;
//      }
//      */
//    }
//    /*
//    else if(keyPressed(194)){
//      Cruising_Flag = 0;Left_Speed_Hold = 255;
//             Right_Speed_Hold = 255; return;       //正常模式
//    }
//    */
//    else if(keyPressed(122)){             //按键3               
//      Cruising_Flag = 1;WiFiorIR = false;Left_Speed_Hold = 180;
//             Right_Speed_Hold = 180;displayflag1 = true; return;       //跟随
//    }
//    else if(keyPressed(48)){              //按键1
//      Cruising_Flag = 2;WiFiorIR = false;Left_Speed_Hold = 180;
//             Right_Speed_Hold = 180; displayflag2 = true;return;       //巡线
//    }
//    else if(keyPressed(66)){              //按键7
//      Cruising_Flag = 5;displayflag = true; return;       //超声波距离PC端显示
//    }
//    else if(keyPressed(194)){
//             WiFiorIR = true;
//             Cruising_Flag = 0;RevStatus=0;   //正常模式
//             Left_Speed_Hold = 255;
//             Right_Speed_Hold = 255;
//             return;       
//    }
//    else{
//          if(WiFiorIR)
//         {
//            MOTOR_GO_STOP;
//            //WiFiorIR = true;
//         }   
//    }
//    startDecode();// 接收下一个值
//}
//
//void setup()
//{
//  pinMode(dirPin1,OUTPUT);
//  pinMode(dirPin2,OUTPUT);
//  pinMode(pxrPin1,OUTPUT);
//  pinMode(pxrPin2,OUTPUT);
//  pinMode(Carled,OUTPUT);
//  pinMode(pin,OUTPUT);
//  pinMode(IR_FOLLOW_LEFT, INPUT);
//  pinMode(IR_FOLLOW_RIGHT, INPUT);
//  pinMode(Echo, INPUT);
//  pinMode(Trig, OUTPUT);
//  pinMode(fan,OUTPUT);
//  digitalWrite(fan,0);
//  
//  rgbLED.setColor(0,0);
//  rgbLED.setColor(0,0,0,10);
//  rgbLED.show();
//
//  delay(1000);
//  drawBmp(bitmap1);
//  delay(1000);
//  drawBmp(bitmap2);
//  delay(1000);
//  drawBmp(bitmap3);
//  delay(1000);
//  drawBmp(bitmap4);
//  delay(1000);
//  drawBmp(bitmap5);
//  delay(100);
//  displayStr(0,30,"  WuLiBot");
//  //displayStr(0,30," CAMEL.F1");
//  for(int i=0;i<5;i++)
//  {
//    digitalWrite(Carled, LOW); 
//    delay(300);
//    digitalWrite(Carled, HIGH); 
//    delay(300);
//  }
//  digitalWrite(Carled, LOW); 
//  //PlayMusic(sizeof(Tune_3)/sizeof(Tune_3[0]),Tune_3,Beat_3);
//  PlayMusicInt(sizeof(Tune0)/sizeof(Tune0[0]),Tune0,Beat0);
//  PlayMusicInt(sizeof(Tune0)/sizeof(Tune0[0]),Tune0,Beat0);
//  irrecv.enableIRIn();  // 初始化红外接收器
//  mySerial.begin(9600);
//}
//
//void loop()
//{
//  Get_uartdata();
//  Cruising_Mod();
//  IRrun();
//}
